<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="315" failures="0" errors="0" time="1867.018">
    <testsuite name="tests/bde001-proposal-voting.test.ts" timestamp="2025-07-09T11:25:32.751Z" hostname="Mikes-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/bde001-proposal-voting.test.ts" name="bme001-0-proposal-voting contract &gt; ensures the contract is deployed" time="0">
        </testcase>
        <testcase classname="tests/bde001-proposal-voting.test.ts" name="bme001-0-proposal-voting contract &gt; core-propose - can set new sunset height" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/categorical/categorical.test.ts" timestamp="2025-07-09T11:25:32.752Z" hostname="Mikes-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/claritybitcoin/bitcoin_tx.test.ts" timestamp="2025-07-09T11:25:32.753Z" hostname="Mikes-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check parse random mempool segwit" time="0">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output segwit 0" time="0">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output segwit 1" time="0">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output legacy 0" time="0">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output legacy 1" time="0">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check parse legacy op_return" time="0">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check parse segwit op_return" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/core-proposal-voting/custom-majority.test.ts" timestamp="2025-07-09T11:25:32.754Z" hostname="Mikes-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check value set by proposal" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check none set by proposal" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check err-not-majority" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check err-not-majority for 50%" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check ok for 50.01%" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote cant conclude before end height" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check tied vote concludes false" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote less than custom concludes false" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote equal to custom concludes false" time="0">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote greater than custom concludes true" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/cpmm/categorical.test.ts" timestamp="2025-07-09T11:25:32.754Z" hostname="Mikes-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/cpmm/marketplace.test.ts" timestamp="2025-07-09T11:25:32.755Z" hostname="Mikes-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice can create a sell order" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice can create two sell orders if first is cancelled" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice cant create two sell order" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice can create two sell orders if first is cancelled" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice sell order cant be fullfilled if her balance too low" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice sell order can be fullfilled" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure bob cant buy non existing order " time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure bob order expires" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure bob order can buy if expiry pushed" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure order cant be filled twice" time="0">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; check bob and alice can both claim after p2p trade" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/cpmm/scalar.test.ts" timestamp="2025-07-09T11:25:32.756Z" hostname="Mikes-MacBook-Pro.local" tests="18" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim alice wins ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; ensure share are more expensive when pool grows" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; fails if too much slippage " time="0">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim more winners ok" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/gating/account-gating.test.ts" timestamp="2025-07-09T11:25:32.757Z" hostname="Mikes-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; err-expecting-merkle-root-for-poll" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; err-unauthorised" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; ensure bme022 is valid extension" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; can call set-merkle-root via proposal" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; can&apos;t call create-market with invalid merkle lookup key" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; deployer can create-market if dao bootstrapped" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; alice cannot create-market if dao bootstrapped" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; GENERATE TESTNET MERKLE ROOTS FOR MARKET CREATION" time="0">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; can create-market with valid merkle proof" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/governance/initial-allocation.test.ts" timestamp="2025-07-09T11:25:32.758Z" hostname="Mikes-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; User is not recipient" time="0">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; check initial recipients" time="0">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; cannot reset allocation directly" time="0">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; can reset allocation via dao" time="0">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; cannot claim before cliff" time="0">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; can claim after cliff" time="0">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; can claim incrementally after cliff" time="0">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; cannot reset allocation after first claim made" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/governance/staged-release.test.ts" timestamp="2025-07-09T11:25:32.758Z" hostname="Mikes-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; buying is blocked before initialisation" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot directly initialisate" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; check initial variables" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot claim before initialisation" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; only dao can advance stage" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot advance beyond last stage" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot exceed stage limit" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; payout is determined by stage ratio" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cancel prevent buy" time="0">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cancel enable refund" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/claims-with-market-fee.test.ts" timestamp="2025-07-09T11:25:32.759Z" hostname="Mikes-MacBook-Pro.local" tests="1" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="successful claim &gt; bob wins 50% of pool" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/claims.test.ts" timestamp="2025-07-09T11:25:32.759Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-market-not-found" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-user-not-winner" time="0">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="successful claim &gt; bob wins 50% of pool" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/create-market-fees.test.ts" timestamp="2025-07-09T11:25:32.760Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure creation fee is paid" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure create market fee is paid" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure market fee cant exceed max" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure betty pays the market creat fee of 1000 but receives 10% of alice winnings" time="0">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure fees are correct with 4 users" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/resolving.test.ts" timestamp="2025-07-09T11:25:32.761Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolving errors &gt; only dev can resolve" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolving errors &gt; err-market-not-found" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolving errors &gt; err-already-concluded" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolve market &gt; resolve market yes" time="0">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolve market &gt; resolve market no bids" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/scenarios.test.ts" timestamp="2025-07-09T11:25:32.762Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stake 100STX on YES, market resolves yes" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100STX on yes, Bob 100STX on NO market resolves yes" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/staking.test.ts" timestamp="2025-07-09T11:25:32.763Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction errors &gt; user can&apos;t commit more than their balance" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction errors &gt; err-already-concluded" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction fees and stakes &gt; user transfers exact stake" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction fees and stakes &gt; fees are collected up front from prediction stakes" time="0">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction fees and stakes &gt; alice hedges yes and no" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/reputation/reputation-sft.test.ts" timestamp="2025-07-09T11:25:32.765Z" hostname="Mikes-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; only dao can mint" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; only dao can burn" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; only dao can transfer" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; dao can mint and burn additional amount" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; dao can transfer" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; dao can transfer many" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; cannot claim before first epoch" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; cannot claim with 0 reps" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; only dao extensions can trigger claims" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice cant claim twice in same epoch" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice and bobs claims are proportional" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice and bob can claim subsequent epochs" time="0">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice and bobs shares decrease proportionally when tom creates a market" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/sbtc/claims.test.ts" timestamp="2025-07-09T11:25:32.765Z" hostname="Mikes-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-market-not-found" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-user-balance-unknown" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-user-not-winner" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-winning-pool-is-zero" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="successful claim &gt; bob wins 50% of pool" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/sbtc/scenarios.test.ts" timestamp="2025-07-09T11:25:32.766Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stake 100STX on YES, market resolves yes" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100STX on yes, Bob 100STX on NO market resolves yes" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/sbtc/staking.test.ts" timestamp="2025-07-09T11:25:32.767Z" hostname="Mikes-MacBook-Pro.local" tests="18" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction errors &gt; user can&apos;t commit if slippage too high" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction fees and stakes &gt; user transfers exact stake" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction fees and stakes &gt; fees are collected up front from prediction stakes" time="0">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction fees and stakes &gt; alice hedges yes and no" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/scalar/scalar-market-pyth.test.ts" timestamp="2025-07-09T11:25:32.768Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 5 for STX/USD/0" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 3 for STX/USD/1" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 3 for STX/USD/2" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 3 for STX/USD (ie 0)" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 3 if above range STX/USD/3" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim loser 1 ok" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim loser 2 ok" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim winners ok all staked on winning category" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; assert overbuying throw correct error" time="0">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim winners ok all staked on wrong category" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/voting/voting.test.ts" timestamp="2025-07-09T11:25:32.769Z" hostname="Mikes-MacBook-Pro.local" tests="25" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; err too few categories" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create binary market ok" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create ok" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create and stake ok" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; res agent cannot stake" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create and stake spread ok" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve ok" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; claim loser ok" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; claim winner ok" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; err-disputer-must-have-stake" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; err-unauthorised - dao function" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; staker can create market vote" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; staker can create market vote" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote cant close before voting window" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote can close after voting window with no votes" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote cant vote after end" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; cant vote with more than current unlocked bdg balance" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; can vote before end" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote closes true with for votes" time="0">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote closes true with against votes" time="0">
        </testcase>
    </testsuite>
</testsuites>
