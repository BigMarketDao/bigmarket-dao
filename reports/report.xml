<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="368" failures="0" errors="0" time="38.275">
    <testsuite name="tests/bde001-proposal-voting.test.ts" timestamp="2025-05-29T08:48:33.521Z" hostname="Mikes-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0.146">
        <testcase classname="tests/bde001-proposal-voting.test.ts" name="bme001-0-proposal-voting contract &gt; ensures the contract is deployed" time="0.009">
        </testcase>
        <testcase classname="tests/bde001-proposal-voting.test.ts" name="bme001-0-proposal-voting contract &gt; core-propose - can set new sunset height" time="0.137">
            <system-out>
heightAfter:  { type: [33m1[39m, value: [33m238n[39m }

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/categorical/categorical.test.ts" timestamp="2025-05-29T08:48:33.522Z" hostname="Mikes-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="1.355">
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; err too few categories" time="0.088">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create ok" time="0.09">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.093">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create and stake ok" time="0.098">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.093">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.099">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve ok" time="0.1">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.099">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.1">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; claim loser ok" time="0.1">
        </testcase>
        <testcase classname="tests/categorical/categorical.test.ts" name="claiming errors &gt; claim winner ok" time="0.105">
        </testcase>
    </testsuite>
    <testsuite name="tests/core-proposal-voting/custom-majority.test.ts" timestamp="2025-05-29T08:48:33.523Z" hostname="Mikes-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0.924">
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check value set by proposal" time="0.092">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check none set by proposal" time="0.091">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check err-not-majority" time="0.091">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check err-not-majority for 50%" time="0.089">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check ok for 50.01%" time="0.09">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote cant conclude before end height" time="0.093">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check tied vote concludes false" time="0.094">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote less than custom concludes false" time="0.095">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote equal to custom concludes false" time="0.095">
        </testcase>
        <testcase classname="tests/core-proposal-voting/custom-majority.test.ts" name="custom majority tests &gt; check vote greater than custom concludes true" time="0.094">
        </testcase>
    </testsuite>
    <testsuite name="tests/claritybitcoin/bitcoin_tx.test.ts" timestamp="2025-05-29T08:48:33.524Z" hostname="Mikes-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="0.197">
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check create market" time="0.091">
            <system-out>
Bitcoin Regtest WIF Private Key: VLyfVMkvLLhYL2DKHcnqYeKpQ7mcPp2Ud

            </system-out>
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check parse random mempool segwit" time="0.012">
            <system-out>
check parse random mempool segwit 02000000000101690229f4efc7902ab27dd94b3c114abca8ac46fde629f7a276c1ed30609334f70000000017160014ea22e269d8edf24954708789c07e8286d7ce0fbe01000000014e5b6605000000001976a914674a8527a29f25613552267d0edfd181212becdc88ac0247304402201da873b8738a6db149c4810b658eba67f09ab6969fd4066631b0f15f184252160220154966c003f817ff57e0736fa39f8f24609ac7e830647835761e84665efddf74012103ac2362ac29f935b88e9c7acbc26f8697fd03cbd7d302041b1d7d9706f3e22d8b00000000

            </system-out>
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output segwit 0" time="0.031">
            <system-out>
buildMockBitcoinSegwitTransaction: encodedData: 0c0000000301690100000000000000000000000000000000016f01000000000000000000000000000000140170051a7321b74e2b6a7e949e6c4ad313035b1665095017
buildMockBitcoinSegwitTransaction: signed: 020000000001016f21719ffbec398cef579afcd9da534958f701ab7392a0ae86764f1ef19cc17e0000000000ffffffff020000000000000000456a430c0000000301690100000000000000000000000000000000016f01000000000000000000000000000000140170051a7321b74e2b6a7e949e6c4ad313035b166509501750c300000000000016001417de0e83f7b4e8b841e6df48e86f56fa19f30c4c02483045022100cf5884881492d51238a597307877916108f5c83adda0766b3c13dad6d3dfb6ad02201d371ca9f77f068243974e2a6d0f2a23478b7e289b04044bb7bec29cca4ee036012103de4ea60be44c9d641cea3d7497085c2839192143852dd87ddb12e1782df37b3800000000
check get-output segwit 0 6a430c0000000301690100000000000000000000000000000000016f01000000000000000000000000000000140170051a7321b74e2b6a7e949e6c4ad313035b1665095017

            </system-out>
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output segwit 1" time="0.015">
            <system-out>
buildMockBitcoinSegwitTransaction: encodedData: 0c0000000301690100000000000000000000000000000000016f01000000000000000000000000000000140170051a7321b74e2b6a7e949e6c4ad313035b1665095017
buildMockBitcoinSegwitTransaction: signed: 020000000001016f21719ffbec398cef579afcd9da534958f701ab7392a0ae86764f1ef19cc17e0000000000ffffffff020000000000000000456a430c0000000301690100000000000000000000000000000000016f01000000000000000000000000000000140170051a7321b74e2b6a7e949e6c4ad313035b166509501750c300000000000016001417de0e83f7b4e8b841e6df48e86f56fa19f30c4c02483045022100976037d5d9432737a5ddeebdf12c89721272220c3e8b739faa6d7cb70a5730eb02207ad94975cacbcb51781412fcc723a34f7c9b6916fb39228180ca69c860629e09012102b37a5ec91245756f6db6494ff10cc0c34ba358b1759adf897e0e43c7863d6e5400000000
check get-output segwit 1 001417de0e83f7b4e8b841e6df48e86f56fa19f30c4c
üîç Extracted Public Key Hash: 17de0e83f7b4e8b841e6df48e86f56fa19f30c4c
üì° SegWit Address: bcrt1qzl0qaqlhkn5tss0xmaywsm6klgvlxrzvgydph3

            </system-out>
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output legacy 0" time="0.012">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check get-output legacy 1" time="0.011">
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check parse legacy op_return" time="0.012">
            <system-out>


 check parse legacy op_return [90mundefined[39m


check parse legacy op_return0c000000040461646472051a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce03616d7401000000000000000000000000000000030269640100000000000000000000000000000004036964780100000000000000000000000000000002

            </system-out>
        </testcase>
        <testcase classname="tests/claritybitcoin/bitcoin_tx.test.ts" name="clarity bitcoin &gt; check parse segwit op_return" time="0.013">
            <system-out>
buildMockBitcoinSegwitTransaction: encodedData: 0c0000000301690100000000000000000000000000000000016f01000000000000000000000000000000140170051a7321b74e2b6a7e949e6c4ad313035b1665095017
buildMockBitcoinSegwitTransaction: signed: 020000000001016f21719ffbec398cef579afcd9da534958f701ab7392a0ae86764f1ef19cc17e0000000000ffffffff020000000000000000456a430c0000000301690100000000000000000000000000000000016f01000000000000000000000000000000140170051a7321b74e2b6a7e949e6c4ad313035b166509501750c300000000000016001417de0e83f7b4e8b841e6df48e86f56fa19f30c4c02483045022100db4d51d3fe858bbf2acade9cc01ff17521f9cdec01a4e61d6344913991d4084f02204207aae15a40649e9bdd3cde3fb92e4c1837c42c6bae86b02eef8f0a00c13223012102c14698247ee7a9a916a8a2b37efdb4fbd87920f27501607e8b78e6894cd6bef900000000

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/gating/account-gating.test.ts" timestamp="2025-05-29T08:48:33.525Z" hostname="Mikes-MacBook-Pro.local" tests="23" failures="0" errors="0" skipped="0" time="2.197">
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; err too few categories" time="0.088">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; create binary market ok" time="0.088">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; create ok" time="0.092">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.093">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; create and stake ok" time="0.095">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.093">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.099">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; resolve ok" time="0.101">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.102">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.102">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; claim loser ok" time="0.102">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="claiming errors &gt; claim winner ok" time="0.105">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; err-expecting-merkle-root-for-poll" time="0.089">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; err-unauthorised" time="0.087">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; ensure bme022 is valid extension" time="0.089">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; can call set-merkle-root via proposal" time="0.093">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; can&apos;t call create-market with invalid merkle lookup key" time="0.096">
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; deployer can create-market if dao bootstrapped" time="0.09">
            <system-out>
bme023-0-market-predicting: 0xa00c6b9d338cdf3792e781e435ed93804033cb7e3fc88a2aa19de46ceb174db1 root= 0x26067618f71da1da6fa33c9b7f8d989b87f71ade892e1c55ce3b46ac79a7e64e

            </system-out>
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; alice cannot create-market if dao bootstrapped" time="0.091">
            <system-out>
bme023-0-market-predicting: 0xa00c6b9d338cdf3792e781e435ed93804033cb7e3fc88a2aa19de46ceb174db1 root= 0x26067618f71da1da6fa33c9b7f8d989b87f71ade892e1c55ce3b46ac79a7e64e

            </system-out>
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; GENERATE TESTNET MERKLE ROOTS FOR MARKET CREATION" time="0.091">
            <system-out>
ST2P1A2ECDAT2053BMYKHCN3ZTRKPX2RAKKY9WJ38, ST15GF59RDTKS7YY8VMKREQ7A0C1CP1NEJE23DMJA, ST167Z6WFHMV0FZKFCRNWZ33WTB0DFBCW9M1FW3AY, ST105HCS1RTR7D61EZET8CWNEF24ENEN3V6ARBYBJ, ST3SJD6KV86N90W0MREGRTM1GWXN8Z91PF6W0BQKM, 
GENERATE TESTNET MERKLE ROOTS FOR MARKET CREATION: ST2P1A2ECDAT2053BMYKHCN3ZTRKPX2RAKKY9WJ38.bme023-0-market-scalar-pyth: 0xa13934b0b6cc013f49d17a536394ca11895d147873239da254905c4b39c2c046 root= 0x6cf941784773751b4c0f4f887f25121106b2b59d026b5bc52822953f9c0e5fef

            </system-out>
        </testcase>
        <testcase classname="tests/gating/account-gating.test.ts" name="gating market  creation &gt; can create-market with valid merkle proof" time="0.109">
            <system-out>
lookupRootKey=a00c6b9d338cdf3792e781e435ed93804033cb7e3fc88a2aa19de46ceb174db1
RooT=5f24649277af2f6364faf35827dffe12b85f2f1dca5ae92733c72af91455aa64
ddv:  [90mundefined[39m
ddv:  [90mundefined[39m
ddv:  [90mundefined[39m
ddv:  [90mundefined[39m
ddv:  [90mundefined[39m

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/cpmm/categorical.test.ts" timestamp="2025-05-29T08:48:33.526Z" hostname="Mikes-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="1.489">
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; err too few categories" time="0.089">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create binary market ok" time="0.09">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create ok" time="0.091">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.094">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create and stake ok" time="0.093">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.09">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.099">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve ok" time="0.097">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.099">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.1">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim loser ok" time="0.102">
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim winner ok" time="0.109">
            <system-out>
MarketBalances ---&gt; categories [
  { type: [33m13[39m, data: [32m&apos;lion&apos;[39m },
  { type: [33m13[39m, data: [32m&apos;tiger&apos;[39m },
  { type: [33m13[39m, data: [32m&apos;cheetah&apos;[39m }
]
MarketBalances ---&gt; outcome [33m2n[39m
MarketBalances ---&gt; stakes [
  { type: [33m1[39m, value: [33m9997n[39m },
  { type: [33m1[39m, value: [33m16659n[39m },
  { type: [33m1[39m, value: [33m29981n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m }
]
MarketBalances ---&gt; stake-tokens {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m9903333n[39m },
    { type: [33m1[39m, value: [33m9903333n[39m },
    { type: [33m1[39m, value: [33m9903333n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
claim winner ok [
  {
    event: [32m&apos;stx_transfer_event&apos;[39m,
    data: {
      amount: [32m&apos;3302872&apos;[39m,
      memo: [32m&apos;&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      sender: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-predicting&apos;[39m
    }
  },
  {
    event: [32m&apos;ft_mint_event&apos;[39m,
    data: {
      amount: [32m&apos;4&apos;[39m,
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-token&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m
    }
  },
  {
    event: [32m&apos;nft_mint_event&apos;[39m,
    data: {
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-id&apos;[39m,
      raw_value: [32m&apos;0x0c00000002056f776e6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token&apos;[39m,
      raw_value: [32m&apos;0x0c0000000406616d6f756e740100000000000000000000000000000004056576656e740d000000087366745f6d696e7409726563697069656e74061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-predicting&apos;[39m,
      raw_value: [32m&apos;0x0c0000000a07636c61696d6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d7472656173757279056576656e740d0000000e636c61696d2d77696e6e696e677309696e6465782d776f6e0100000000000000000000000000000002096d61726b65742d69640100000000000000000000000000000000096d61726b65746665650100000000000000000000000000000000036e657401000000000000000000000000003265d806726566756e6401000000000000000000000000003265d80a746f74616c2d706f6f6c010000000000000000000000000000dd3d0a757365722d7374616b650100000000000000000000000000000d050c77696e6e696e672d706f6f6c010000000000000000000000000000751d&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  }
]

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/categorical.test.ts" name="claiming errors &gt; claim winner ok" time="0.136">
            <system-out>
MarketBalances ---&gt; categories [
  { type: [33m13[39m, data: [32m&apos;lion&apos;[39m },
  { type: [33m13[39m, data: [32m&apos;tiger&apos;[39m },
  { type: [33m13[39m, data: [32m&apos;cheetah&apos;[39m }
]
MarketBalances ---&gt; outcome [33m2n[39m
MarketBalances ---&gt; stakes [
  { type: [33m1[39m, value: [33m162761n[39m },
  { type: [33m1[39m, value: [33m314207n[39m },
  { type: [33m1[39m, value: [33m568719n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m }
]
MarketBalances ---&gt; stake-tokens {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m19803333n[39m },
    { type: [33m1[39m, value: [33m29703333n[39m },
    { type: [33m1[39m, value: [33m29703333n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
claim winner ok [
  {
    event: [32m&apos;stx_transfer_event&apos;[39m,
    data: {
      amount: [32m&apos;464213&apos;[39m,
      memo: [32m&apos;&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      sender: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-predicting&apos;[39m
    }
  },
  {
    event: [32m&apos;ft_mint_event&apos;[39m,
    data: {
      amount: [32m&apos;4&apos;[39m,
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-token&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m
    }
  },
  {
    event: [32m&apos;nft_mint_event&apos;[39m,
    data: {
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-id&apos;[39m,
      raw_value: [32m&apos;0x0c00000002056f776e6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token&apos;[39m,
      raw_value: [32m&apos;0x0c0000000406616d6f756e740100000000000000000000000000000004056576656e740d000000087366745f6d696e7409726563697069656e74061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-predicting&apos;[39m,
      raw_value: [32m&apos;0x0c0000000a07636c61696d6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d7472656173757279056576656e740d0000000e636c61696d2d77696e6e696e677309696e6465782d776f6e0100000000000000000000000000000002096d61726b65742d69640100000000000000000000000000000000096d61726b65746665650100000000000000000000000000000000036e6574010000000000000000000000000007155506726566756e6401000000000000000000000000000715550a746f74616c2d706f6f6c01000000000000000000000000000ff4b70a757365722d7374616b650100000000000000000000000000000d050c77696e6e696e672d706f6f6c010000000000000000000000000008ad8f&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  }
]

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/cpmm/marketplace.test.ts" timestamp="2025-05-29T08:48:33.527Z" hostname="Mikes-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="1.039">
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice can create a sell order" time="0.096">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice can create two sell orders if first is cancelled" time="0.103">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice cant create two sell order" time="0.098">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice can create two sell orders if first is cancelled" time="0.104">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice sell order cant be fullfilled if her balance too low" time="0.105">
            <system-out>
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m1980n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure alice sell order can be fullfilled" time="0.109">
            <system-out>
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m1780n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m200n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure bob cant buy non existing order " time="0.101">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure bob can buy after market resolves" time="0.1">
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; ensure order cant be filled twice" time="0.108">
            <system-out>
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m980n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m1000n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/marketplace.test.ts" name="claiming errors &gt; check bob and alice can both claim after p2p trade" time="0.115">
            <system-out>
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/cpmm/scalar.test.ts" timestamp="2025-05-29T08:48:33.528Z" hostname="Mikes-MacBook-Pro.local" tests="18" failures="0" errors="0" skipped="0" time="1.837">
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; err too few categories" time="0.088">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create binary market ok" time="0.091">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create ok" time="0.101">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.101">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create and stake ok" time="0.097">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.101">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.1">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve ok" time="0.102">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.103">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim loser ok" time="0.102">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim alice wins ok" time="0.104">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; ensure share are more expensive when pool grows" time="0.103">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim winner ok" time="0.117">
            <system-out>
----&gt; contractBalance : bme024-0-market-scalar-pyth : undefined
----&gt; contractBalance : bme024-0-market-scalar-pyth : 9999
----&gt; contractBalance : bme024-0-market-scalar-pyth : 13959
----&gt; contractBalance : bme024-0-market-scalar-pyth : 13959
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }
MarketBalances ---&gt; categories [
  { type: [33m12[39m, data: { max: [36m[Object][39m, min: [36m[Object][39m } },
  { type: [33m12[39m, data: { max: [36m[Object][39m, min: [36m[Object][39m } },
  { type: [33m12[39m, data: { max: [36m[Object][39m, min: [36m[Object][39m } }
]
MarketBalances ---&gt; outcome [33m0n[39m
MarketBalances ---&gt; stakes [
  { type: [33m1[39m, value: [33m6953n[39m },
  { type: [33m1[39m, value: [33m3333n[39m },
  { type: [33m1[39m, value: [33m8451n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m }
]
MarketBalances ---&gt; stake-tokens {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m7293n[39m },
    { type: [33m1[39m, value: [33m3333n[39m },
    { type: [33m1[39m, value: [33m6633n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m3620n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-token-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m3960n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-token-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m5118n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-token-balances: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m3300n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; fails if too much slippage " time="0.092">
        </testcase>
        <testcase classname="tests/cpmm/scalar.test.ts" name="claiming errors &gt; claim more winners ok" time="0.132">
            <system-out>
{ type: [33m7[39m, value: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } } }
MarketBalances ---&gt; categories [
  { type: [33m12[39m, data: { max: [36m[Object][39m, min: [36m[Object][39m } },
  { type: [33m12[39m, data: { max: [36m[Object][39m, min: [36m[Object][39m } },
  { type: [33m12[39m, data: { max: [36m[Object][39m, min: [36m[Object][39m } }
]
MarketBalances ---&gt; outcome [33m0n[39m
MarketBalances ---&gt; stakes [
  { type: [33m1[39m, value: [33m17764n[39m },
  { type: [33m1[39m, value: [33m21752n[39m },
  { type: [33m1[39m, value: [33m26652n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m },
  { type: [33m1[39m, value: [33m0n[39m }
]
MarketBalances ---&gt; stake-tokens {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m11583n[39m },
    { type: [33m1[39m, value: [33m14883n[39m },
    { type: [33m1[39m, value: [33m16533n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m5299n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m7935n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m6774n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
claim winner ok [
  {
    event: [32m&apos;stx_transfer_event&apos;[39m,
    data: {
      amount: [32m&apos;8067&apos;[39m,
      memo: [32m&apos;&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      sender: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-scalar-pyth&apos;[39m
    }
  },
  {
    event: [32m&apos;ft_mint_event&apos;[39m,
    data: {
      amount: [32m&apos;4&apos;[39m,
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-token&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m
    }
  },
  {
    event: [32m&apos;nft_mint_event&apos;[39m,
    data: {
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-id&apos;[39m,
      raw_value: [32m&apos;0x0c00000002056f776e6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token&apos;[39m,
      raw_value: [32m&apos;0x0c0000000406616d6f756e740100000000000000000000000000000004056576656e740d000000087366745f6d696e7409726563697069656e74061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-scalar-pyth&apos;[39m,
      raw_value: [32m&apos;0x0c0000000a07636c61696d6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d7472656173757279056576656e740d0000000e636c61696d2d77696e6e696e677309696e6465782d776f6e0100000000000000000000000000000000096d61726b65742d69640100000000000000000000000000000000096d61726b65746665650100000000000000000000000000000000036e65740100000000000000000000000000001f8306726566756e640100000000000000000000000000001f830a746f74616c2d706f6f6c01000000000000000000000000000102780a757365722d7374616b650100000000000000000000000000000d050c77696e6e696e672d706f6f6c0100000000000000000000000000004564&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  }
]

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/governance/initial-allocation.test.ts" timestamp="2025-05-29T08:48:33.529Z" hostname="Mikes-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="1.491">
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; User is not recipient" time="0.088">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; check initial recipients" time="0.089">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; cannot reset allocation directly" time="0.089">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; can reset allocation via dao" time="0.094">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; cannot claim before cliff" time="0.2">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; can claim after cliff" time="0.32">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; can claim incrementally after cliff" time="0.408">
        </testcase>
        <testcase classname="tests/governance/initial-allocation.test.ts" name="initial distribution &gt; cannot reset allocation after first claim made" time="0.203">
        </testcase>
    </testsuite>
    <testsuite name="tests/governance/staged-release.test.ts" timestamp="2025-05-29T08:48:33.529Z" hostname="Mikes-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0.906">
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; buying is blocked before initialisation" time="0.009">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot directly initialisate" time="0.087">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; check initial variables" time="0.093">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot claim before initialisation" time="0.092">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; only dao can advance stage" time="0.092">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot advance beyond last stage" time="0.121">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cannot exceed stage limit" time="0.093">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; payout is determined by stage ratio" time="0.121">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cancel prevent buy" time="0.098">
        </testcase>
        <testcase classname="tests/governance/staged-release.test.ts" name="initial distribution &gt; cancel enable refund" time="0.1">
            <system-out>
balance: bdg:  [33m1000025000n[39m
balance: idoPurchase:  { type: [33m10[39m, value: { type: [33m1[39m, value: [33m25000n[39m } }
balance: stx: 99999999995000
balance: idoPurchase:  { type: [33m10[39m, value: { type: [33m1[39m, value: [33m25000n[39m } }

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/claims-with-market-fee.test.ts" timestamp="2025-05-29T08:48:33.530Z" hostname="Mikes-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="1.461">
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; err too few categories" time="0.089">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; create ok" time="0.091">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; create and stake ok" time="0.093">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.093">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.097">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; resolve ok" time="0.099">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.103">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.103">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.102">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; claim loser ok" time="0.102">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="claiming errors &gt; claim winner ok" time="0.104">
        </testcase>
        <testcase classname="tests/predictions/claims-with-market-fee.test.ts" name="successful claim &gt; bob wins 50% of pool" time="0.102">
            <system-out>
contractBalance 215: 9900
contractBalance 272: 4950
contractBalance 285: 0

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/claims.test.ts" timestamp="2025-05-29T08:48:33.531Z" hostname="Mikes-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="1.965">
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err too few categories" time="0.093">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create binary market ok" time="0.091">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create ok" time="0.092">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.095">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create and stake ok" time="0.097">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.096">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.104">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve ok" time="0.105">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.105">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.102">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.102">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.101">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; claim loser ok" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; claim winner ok" time="0.106">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-market-not-found" time="0.09">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-user-balance-unknown" time="0.092">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0.092">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-user-not-winner" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-winning-pool-is-zero" time="0.009">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0.096">
        </testcase>
        <testcase classname="tests/predictions/claims.test.ts" name="successful claim &gt; bob wins 50% of pool" time="0.103">
            <system-out>
contractBalance 215: 9900
contractBalance 272: 4950
contractBalance 285: 0

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/create-market-fees.test.ts" timestamp="2025-05-29T08:48:33.532Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="1.867">
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; err too few categories" time="0.088">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create binary market ok" time="0.091">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create ok" time="0.09">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create and stake ok" time="0.095">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.093">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.098">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve ok" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.099">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.099">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.099">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.101">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; claim loser ok" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="claiming errors &gt; claim winner ok" time="0.104">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure creation fee is paid" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure create market fee is paid" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure market fee cant exceed max" time="0.093">
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure betty pays the market creat fee of 1000 but receives 10% of alice winnings" time="0.106">
            <system-out>
assertUserBalance: ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM100000000000000
root=5f24649277af2f6364faf35827dffe12b85f2f1dca5ae92733c72af91455aa64
lookupRootKey=a00c6b9d338cdf3792e781e435ed93804033cb7e3fc88a2aa19de46ceb174db1
assertUserBalance: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD599999999998075
assertUserBalance: ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme022-0-market-gating950
assertUserBalance: ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM100000000000000

            </system-out>
        </testcase>
        <testcase classname="tests/predictions/create-market-fees.test.ts" name="prediction contract &gt; ensure fees are correct with 4 users" time="0.123">
            <system-out>
assertUserBalance: ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM100000000000000
root=5f24649277af2f6364faf35827dffe12b85f2f1dca5ae92733c72af91455aa64
lookupRootKey=a00c6b9d338cdf3792e781e435ed93804033cb7e3fc88a2aa19de46ceb174db1
assertUserBalance: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD599999900000000
assertUserBalance: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND99999999999000
assertUserBalance: ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM100000000000000

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/create-market.test.ts" timestamp="2025-05-29T08:48:33.533Z" hostname="Mikes-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0.106">
        <testcase classname="tests/predictions/create-market.test.ts" name="prediction contract &gt; ensures the contract is deployed" time="0.012">
        </testcase>
        <testcase classname="tests/predictions/create-market.test.ts" name="prediction contract &gt; setup market with market share type works" time="0.094">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/resolving.test.ts" timestamp="2025-05-29T08:48:33.533Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="1.925">
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; err too few categories" time="0.09">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create ok" time="0.091">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create and stake ok" time="0.095">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.093">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.098">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve ok" time="0.098">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.104">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.109">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.102">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; claim loser ok" time="0.101">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="claiming errors &gt; claim winner ok" time="0.174">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolving errors &gt; only dev can resolve" time="0.098">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolving errors &gt; err-market-not-found" time="0.095">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolving errors &gt; err-already-concluded" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolve market &gt; resolve market yes" time="0.098">
        </testcase>
        <testcase classname="tests/predictions/resolving.test.ts" name="resolve market &gt; resolve market no bids" time="0.102">
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/scenarios.test.ts" timestamp="2025-05-29T08:48:33.534Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="2.031">
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; err too few categories" time="0.088">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create ok" time="0.091">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.103">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create and stake ok" time="0.096">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.093">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.099">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve ok" time="0.098">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.099">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; claim loser ok" time="0.103">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="claiming errors &gt; claim winner ok" time="0.104">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stake 100STX on YES, market resolves yes" time="0.096">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100STX on yes, Bob 100STX on NO market resolves yes" time="0.128">
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0.204">
            <system-out>
contractBalance: 544500000
contractBalance: 0

            </system-out>
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0.108">
            <system-out>
contractBalance: 39600000000000
contractBalance: 0

            </system-out>
        </testcase>
        <testcase classname="tests/predictions/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0.131">
            <system-out>
contractBalance: 84150000990000
contractBalance: 44550000990000
contractBalance: 39600000000000
contractBalance 32: 19800000000000
contractBalance 32: 0

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/predictions/staking.test.ts" timestamp="2025-05-29T08:48:33.535Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="1.855">
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; err too few categories" time="0.091">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create binary market ok" time="0.092">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create ok" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.096">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create and stake ok" time="0.096">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.095">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.102">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve ok" time="0.103">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.102">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.104">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.101">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.104">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; claim loser ok" time="0.1">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="claiming errors &gt; claim winner ok" time="0.105">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction errors &gt; user can&apos;t commit more than their balance" time="0.091">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction errors &gt; err-already-concluded" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction fees and stakes &gt; user transfers exact stake" time="0.096">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction fees and stakes &gt; fees are collected up front from prediction stakes" time="0.094">
        </testcase>
        <testcase classname="tests/predictions/staking.test.ts" name="prediction fees and stakes &gt; alice hedges yes and no" time="0.095">
        </testcase>
    </testsuite>
    <testsuite name="tests/reputation/reputation-sft.test.ts" timestamp="2025-05-29T08:48:33.536Z" hostname="Mikes-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="1.285">
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; only dao can mint" time="0.089">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; only dao can burn" time="0.091">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; only dao can transfer" time="0.091">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; dao can mint and burn additional amount" time="0.097">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; dao can transfer" time="0.095">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="minting &gt; dao can transfer many" time="0.098">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; cannot claim before first epoch" time="0.086">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; cannot claim with 0 reps" time="0.098">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; only dao extensions can trigger claims" time="0.108">
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice cant claim twice in same epoch" time="0.103">
            <system-out>
contractBalance: undefined

            </system-out>
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice and bobs claims are proportional" time="0.104">
            <system-out>
contractBalance: undefined

            </system-out>
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice and bob can claim subsequent epochs" time="0.121">
            <system-out>
contractBalance: undefined

            </system-out>
        </testcase>
        <testcase classname="tests/reputation/reputation-sft.test.ts" name="claiming &gt; alice and bobs shares decrease proportionally when tom creates a market" time="0.104">
            <system-out>
contractBalance: undefined

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/sbtc/claims.test.ts" timestamp="2025-05-29T08:48:33.537Z" hostname="Mikes-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="1.978">
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err too few categories" time="0.088">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create ok" time="0.091">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.094">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create and stake ok" time="0.106">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.1">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.098">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve ok" time="0.099">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.104">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.098">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.101">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; claim loser ok" time="0.1">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; claim winner ok" time="0.108">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-market-not-found" time="0.095">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-user-balance-unknown" time="0.092">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0.095">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-user-not-winner" time="0.101">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-winning-pool-is-zero" time="0.011">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="claiming errors &gt; err-market-not-concluded" time="0.099">
        </testcase>
        <testcase classname="tests/sbtc/claims.test.ts" name="successful claim &gt; bob wins 50% of pool" time="0.109">
            <system-out>
contractBalance 215: undefined
contractBalance 228: undefined
contractBalance 242: undefined

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/sbtc/scenarios.test.ts" timestamp="2025-05-29T08:48:33.538Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="1.995">
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; err too few categories" time="0.088">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create ok" time="0.09">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.094">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create and stake ok" time="0.167">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.097">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.108">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve ok" time="0.101">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.098">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.103">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.103">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; claim loser ok" time="0.101">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="claiming errors &gt; claim winner ok" time="0.105">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stake 100STX on YES, market resolves yes" time="0.096">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100STX on yes, Bob 100STX on NO market resolves yes" time="0.099">
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="check actual claims vs expected for some scenarios &gt; Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0.113">
            <system-out>
contractBalance: undefined
contractBalance: undefined

            </system-out>
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0.108">
            <system-out>
contractBalance: undefined
contractBalance: undefined

            </system-out>
        </testcase>
        <testcase classname="tests/sbtc/scenarios.test.ts" name="Alice stakes 100 STX on YES, Bob stakes 50 STX on YES, Tom stakes 200 STX on NO, Annie stakes 20 STX on NO, market resolves NO" time="0.135">
            <system-out>
contractBalance: undefined
contractBalance: undefined
contractBalance: undefined
contractBalance 32: undefined
contractBalance 32: undefined

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/sbtc/staking.test.ts" timestamp="2025-05-29T08:48:33.539Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="1.93">
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; err too few categories" time="0.09">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create ok" time="0.092">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.095">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create and stake ok" time="0.097">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.098">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.098">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve ok" time="0.099">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.103">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.105">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; claim loser ok" time="0.18">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="claiming errors &gt; claim winner ok" time="0.11">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction errors &gt; user can&apos;t commit more than their balance" time="0.092">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction errors &gt; err-already-concluded" time="0.095">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction fees and stakes &gt; user transfers exact stake" time="0.096">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction fees and stakes &gt; fees are collected up front from prediction stakes" time="0.095">
        </testcase>
        <testcase classname="tests/sbtc/staking.test.ts" name="prediction fees and stakes &gt; alice hedges yes and no" time="0.096">
        </testcase>
    </testsuite>
    <testsuite name="tests/scalar/scalar-market-dia.test.ts" timestamp="2025-05-29T08:48:33.540Z" hostname="Mikes-MacBook-Pro.local" tests="19" failures="0" errors="0" skipped="0" time="1.885">
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; err too few categories" time="0.087">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; create binary market ok" time="0.089">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; create ok" time="0.089">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.094">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; create and stake ok" time="0.093">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.094">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.098">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; resolve to category 0 for STX/USD/0" time="0.1">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; resolve to category 1 for STX/USD/1" time="0.101">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m1n[39m } },
  price: { type: [33m1[39m, value: [33m105n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  },
  [32m&apos;stacks-height&apos;[39m: { type: [33m1[39m, value: [33m13n[39m }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; resolve to category 2 for STX/USD/2" time="0.102">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } },
  price: { type: [33m1[39m, value: [33m115n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  },
  [32m&apos;stacks-height&apos;[39m: { type: [33m1[39m, value: [33m13n[39m }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; resolve to category 0 for STX/USD (ie 0)" time="0.101">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } },
  price: { type: [33m1[39m, value: [33m0n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  },
  [32m&apos;stacks-height&apos;[39m: { type: [33m1[39m, value: [33m13n[39m }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; resolve to category 2 if above range STX/USD/3" time="0.104">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } },
  price: { type: [33m1[39m, value: [33m125n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  },
  [32m&apos;stacks-height&apos;[39m: { type: [33m1[39m, value: [33m13n[39m }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.102">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.102">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; claim loser 1 ok" time="0.101">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; claim loser 2 ok" time="0.103">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; claim winner ok" time="0.105">
            <system-out>
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m100n[39m }, min: { type: [33m1[39m, value: [33m90n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m110n[39m }, min: { type: [33m1[39m, value: [33m100n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m120n[39m }, min: { type: [33m1[39m, value: [33m110n[39m } }
}
outcome { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } }
stakes {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
claim winner ok {
  result: { type: [33m7[39m, value: { type: [33m1[39m, value: [33m2926n[39m } },
  events: [
    { event: [32m&apos;stx_transfer_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;stx_transfer_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;ft_mint_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;nft_mint_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;print_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;print_event&apos;[39m, data: [36m[Object][39m }
  ],
  costs: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; claim winners ok all staked on winning category" time="0.111">
            <system-out>
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m100n[39m }, min: { type: [33m1[39m, value: [33m90n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m110n[39m }, min: { type: [33m1[39m, value: [33m100n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m120n[39m }, min: { type: [33m1[39m, value: [33m110n[39m } }
}
outcome { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } }
stakes {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m2970n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-dia.test.ts" name="claiming errors &gt; claim winners ok all staked on wrong category" time="0.108">
            <system-out>
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m100n[39m }, min: { type: [33m1[39m, value: [33m90n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m110n[39m }, min: { type: [33m1[39m, value: [33m100n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m120n[39m }, min: { type: [33m1[39m, value: [33m110n[39m } }
}
outcome { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } }
stakes {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m2970n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m990n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/scalar/scalar-market-pyth.test.ts" timestamp="2025-05-29T08:48:33.542Z" hostname="Mikes-MacBook-Pro.local" tests="20" failures="0" errors="0" skipped="0" time="2.032">
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; err too few categories" time="0.096">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create binary market ok" time="0.091">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create ok" time="0.09">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.096">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create and stake ok" time="0.095">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.096">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.101">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 0 for STX/USD/0" time="0.105">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 1 for STX/USD/1" time="0.104">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m1n[39m } },
  price: { type: [33m1[39m, value: [33m105n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 2 for STX/USD/2" time="0.104">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } },
  price: { type: [33m1[39m, value: [33m115n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 0 for STX/USD (ie 0)" time="0.103">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } },
  price: { type: [33m1[39m, value: [33m125n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve to category 2 if above range STX/USD/3" time="0.104">
            <system-out>
response {
  event: { type: [33m13[39m, data: [32m&apos;resolve-market&apos;[39m },
  [32m&apos;market-id&apos;[39m: { type: [33m1[39m, value: [33m0n[39m },
  outcome: { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } },
  price: { type: [33m1[39m, value: [33m125n[39m },
  resolver: {
    type: [33m5[39m,
    address: {
      type: [33m0[39m,
      version: [33m26[39m,
      hash160: [32m&apos;99e2ec69ac5b6e67b4e26edd0e2c1c1a6b9bbd23&apos;[39m
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.103">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.103">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim loser 1 ok" time="0.103">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim loser 2 ok" time="0.103">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim winner ok" time="0.105">
            <system-out>
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m100n[39m }, min: { type: [33m1[39m, value: [33m90n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m110n[39m }, min: { type: [33m1[39m, value: [33m100n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m120n[39m }, min: { type: [33m1[39m, value: [33m110n[39m } }
}
outcome { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } }
stakes {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m33335313n[39m },
    { type: [33m1[39m, value: [33m33335313n[39m },
    { type: [33m1[39m, value: [33m33335314n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
claim winner ok {
  result: { type: [33m7[39m, value: { type: [33m1[39m, value: [33m5939n[39m } },
  events: [
    { event: [32m&apos;stx_transfer_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;ft_mint_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;nft_mint_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;print_event&apos;[39m, data: [36m[Object][39m },
    { event: [32m&apos;print_event&apos;[39m, data: [36m[Object][39m }
  ],
  costs: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim winners ok all staked on winning category" time="0.11">
            <system-out>
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m100n[39m }, min: { type: [33m1[39m, value: [33m90n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m110n[39m }, min: { type: [33m1[39m, value: [33m100n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m120n[39m }, min: { type: [33m1[39m, value: [33m110n[39m } }
}
outcome { type: [33m10[39m, value: { type: [33m1[39m, value: [33m2n[39m } }
stakes {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m33333333n[39m },
    { type: [33m1[39m, value: [33m33333333n[39m },
    { type: [33m1[39m, value: [33m33339273n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}

            </system-out>
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; assert overbuying throw correct error" time="0.09">
        </testcase>
        <testcase classname="tests/scalar/scalar-market-pyth.test.ts" name="claiming errors &gt; claim winners ok all staked on wrong category" time="0.13">
            <system-out>
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m100n[39m }, min: { type: [33m1[39m, value: [33m90n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m110n[39m }, min: { type: [33m1[39m, value: [33m100n[39m } }
}
categories {
  type: [33m12[39m,
  data: { max: { type: [33m1[39m, value: [33m120n[39m }, min: { type: [33m1[39m, value: [33m110n[39m } }
}
outcome { type: [33m10[39m, value: { type: [33m1[39m, value: [33m0n[39m } }
stakes {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m54548865n[39m },
    { type: [33m1[39m, value: [33m59660118n[39m },
    { type: [33m1[39m, value: [33m33000000n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5 {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m15348838n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m11311280n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
get-stake-balances: ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury {
  type: [33m11[39m,
  list: [
    { type: [33m1[39m, value: [33m33000000n[39m },
    { type: [33m1[39m, value: [33m33000000n[39m },
    { type: [33m1[39m, value: [33m33000000n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m },
    { type: [33m1[39m, value: [33m0n[39m }
  ]
}
-----------------------------------------------------------------
claim winner ok {
  type: [33m12[39m,
  data: {
    marketfee: { type: [33m1[39m, value: [33m0n[39m },
    [32m&apos;net-refund&apos;[39m: { type: [33m1[39m, value: [33m50959879n[39m }
  }
}
-----------------------------------------------------------------
-----------------------------------------------------------------
claim winner ok {
  type: [33m12[39m,
  data: {
    marketfee: { type: [33m1[39m, value: [33m0n[39m },
    [32m&apos;net-refund&apos;[39m: { type: [33m1[39m, value: [33m78040120n[39m }
  }
}
-----------------------------------------------------------------
claim winner ok [
  {
    event: [32m&apos;stx_transfer_event&apos;[39m,
    data: {
      amount: [32m&apos;78040120&apos;[39m,
      memo: [32m&apos;&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      sender: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-scalar-pyth&apos;[39m
    }
  },
  {
    event: [32m&apos;ft_mint_event&apos;[39m,
    data: {
      amount: [32m&apos;4&apos;[39m,
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-token&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m
    }
  },
  {
    event: [32m&apos;nft_mint_event&apos;[39m,
    data: {
      asset_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token::bigr-id&apos;[39m,
      raw_value: [32m&apos;0x0c00000002056f776e6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      recipient: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme006-0-treasury&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme030-0-reputation-token&apos;[39m,
      raw_value: [32m&apos;0x0c0000000406616d6f756e740100000000000000000000000000000004056576656e740d000000087366745f6d696e7409726563697069656e74061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d747265617375727908746f6b656e2d69640100000000000000000000000000000006&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  },
  {
    event: [32m&apos;print_event&apos;[39m,
    data: {
      contract_identifier: [32m&apos;ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.bme024-0-market-scalar-pyth&apos;[39m,
      raw_value: [32m&apos;0x0c0000000a07636c61696d6572061a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce11626d653030362d302d7472656173757279056576656e740d0000000e636c61696d2d77696e6e696e677309696e6465782d776f6e0100000000000000000000000000000000096d61726b65742d69640100000000000000000000000000000000096d61726b65746665650100000000000000000000000000000000036e65740100000000000000000000000004a6cc3806726566756e640100000000000000000000000004a6cc380a746f74616c2d706f6f6c0100000000000000000000000008c63b170a757365722d7374616b650100000000000000000000000001f78a400c77696e6e696e672d706f6f6c0100000000000000000000000003405981&apos;[39m,
      topic: [32m&apos;print&apos;[39m,
      value: [36m[Object][39m
    }
  }
]

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/voting/voting.test.ts" timestamp="2025-05-29T08:48:33.543Z" hostname="Mikes-MacBook-Pro.local" tests="25" failures="0" errors="0" skipped="0" time="2.545">
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; err too few categories" time="0.099">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create binary market ok" time="0.093">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create ok" time="0.091">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create and stake not ok on unknown category" time="0.099">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create and stake ok" time="0.095">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; res agent cannot stake" time="0.095">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; create and stake spread ok" time="0.1">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve ok" time="0.1">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.099">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.102">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; resolve undisputed requires window to elapse" time="0.1">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; claim err-user-not-winner-or-claimed" time="0.101">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; claim loser ok" time="0.101">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="claiming errors &gt; claim winner ok" time="0.105">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; err-disputer-must-have-stake" time="0.096">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; err-unauthorised - dao function" time="0.098">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; staker can create market vote" time="0.101">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; staker can create market vote" time="0.104">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote cant close before voting window" time="0.105">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote can close after voting window with no votes" time="0.111">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote cant vote after end" time="0.106">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; cant vote with more than current unlocked bdg balance" time="0.109">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; can vote before end" time="0.109">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote closes true with for votes" time="0.111">
        </testcase>
        <testcase classname="tests/voting/voting.test.ts" name="voting on resolution &gt; vote closes true with against votes" time="0.114">
        </testcase>
    </testsuite>
</testsuites>
